
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    # 隐藏nginx版本号
    server_tokens off;

    map \$\\http_upgrade \$\\connection_upgrade {
        default upgrade;
        '' close;
    }

    log_format  main  '\$\\time_iso8601 [ip: \$\\remote_addr] [host: \$\\host] [\$\\request] '
                      '[x_forwarded_for: \$\\http_x_forwarded_for]'
					  '[req length: \$\\request_length]'
					  '[cost time: \$\\request_time]';

    error_log  /etc/nginx/logs/error.log warn;
    access_log  /etc/nginx/logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;
    underscores_in_headers on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #开启gzip压缩
    gzip on;
    #http的协议版本
    gzip_http_version 1.0;
    #IE版本1-6不支持gzip压缩，关闭
    gzip_disable 'MSIE[1-6].';
    #需要压缩的文件格式 text/html默认会压缩，不用添加
    gzip_types text/css text/javascript application/javascript image/jpeg image/png image/gif;
    #设置压缩缓冲区大小，此处设置为4个8K内存作为压缩结果流缓存
    gzip_buffers 4 8k;
    #压缩文件最小大小
    gzip_min_length 1k;
    #压缩级别1-9
    gzip_comp_level 9;

    upstream backend {
        server ${backendService};
    }

    ${ hasWS ? ("upstream backend-ws \u007B\n\t"+
    "     server " + backendWsService + ";\n\t"+
    "\u007D"): ""}

    server {
        listen       8080;

        underscores_in_headers on;
        root   /site;

        location ${location} {
            index  index.html index.htm;
            try_files \$\\uri \$\\uri/ @router;
        }

        location @router{
            rewrite ^.*\$\\ /index.html last;
        }

        # 是否重写静态资源目录
        ${ rewriteStaticPath ? rewriteStaticContent : "" }

        location ${proxyLocation} {
            proxy_pass         http://backend;
            proxy_redirect     off;
            proxy_set_header   Host \$\\host;
            proxy_set_header   X-Real-IP \$\\remote_addr;
            proxy_set_header   X-Forwarded-For \$\\proxy_add_x_forwarded_for;
            proxy_set_header   X-Forwarded-Host \$\\server_name;
        }

        ${ hasWS ? "location /websocket \u007B \n\t" +
        "    proxy_pass http://backend-ws; \n\t"+
        "    proxy_http_version 1.1;\n\t"+
        "    proxy_set_header Upgrade \$http_upgrade;\n\t"+
        "    proxy_set_header Connection \$connection_upgrade;\n\t"+
        "\u007D": ""}

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }

    server {
        listen 9108;
        location /stub_status {
            stub_status on;
            access_log off;
        }
    }

}

